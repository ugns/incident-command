openapi = "3.0.1"
info = {
  title = "incident-cmd-api"
  description = "API for Security Incident Command Application"
}
servers = [
  {
    x-amazon-apigateway-endpoint-configuration = {
      disableExecuteApiEndpoint = true
    }
  }
]
paths = {
  "/.well-known/jwks.json" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${well_known_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/openapi.json" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${openapi_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/auth/login" = {
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${auth_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_templates"
      }
    }
  }

  "/organizations" = {
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters" = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    x-amazon-apigateway-any-method = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${organizations_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/organizations/{org_id}" = {
    options = {
      parameters = [
        {
          name = "org_id"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    x-amazon-apigateway-any-method = {
      parameters = [
        {
          name = "org_id"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${organizations_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/periods" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${periods_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${periods_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/periods/{periodId}" = {
    get = {
      parameters = [
        {
          name = "periodId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${periods_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    put = {
      parameters = [
        {
          name = "periodId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${periods_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    delete = {
      parameters = [
        {
          name = "periodId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${periods_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "periodId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/activitylogs" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${activitylogs_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${activitylogs_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/activitylogs/{volunteerId}" = {
    get = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${activitylogs_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/incidents" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${incidents_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${incidents_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/incidents/{incidentId}" = {
    get = {
      parameters = [
        {
          name = "incidentId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${incidents_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    put = {
      parameters = [
        {
          name = "incidentId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${incidents_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    delete = {
      parameters = [
        {
          name = "incidentId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${incidents_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "incidentId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/units" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${units_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${units_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/units/{unitId}" = {
    get = {
      parameters = [
        {
          name = "unitId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${units_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    put = {
      parameters = [
        {
          name = "unitId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${units_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    delete = {
      parameters = [
        {
          name = "unitId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${units_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "unitId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/locations" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${locations_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${locations_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/locations/{locationId}" = {
    get = {
      parameters = [
        {
          name = "locationId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${locations_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    put = {
      parameters = [
        {
          name = "locationId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${locations_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    delete = {
      parameters = [
        {
          name = "locationId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${locations_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "locationId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/volunteers" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/volunteers/{volunteerId}" = {
    get = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    put = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    delete = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/volunteers/{volunteerId}/checkout" = {
    put = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/volunteers/{volunteerId}/checkin" = {
    put = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/volunteers/{volunteerId}/dispatch" = {
    put = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${volunteers_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "volunteerId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/reports" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${reports_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/reports/{reportType}" = {
    post = {
      parameters = [
        {
          name = "reportType"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${reports_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "reportType"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Expose-Headers = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {
            application/json = {
              schema = {
                $ref = "#/components/schemas/Empty"
              }
            }
          }
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Expose-Headers = "'Content-Disposition'"
              method.response.header.Access-Control-Allow-Methods = "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }

  "/radios" = {
    get = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${radios_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    post = {
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${radios_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
  "/radios/{radioId}" = {
    get = {
      parameters = [
        {
          name = "radioId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${radios_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    put = {
      parameters = [
        {
          name = "radioId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${radios_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    delete = {
      parameters = [
        {
          name = "radioId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      x-amazon-apigateway-integration = {
        type = "aws_proxy"
        httpMethod = "POST"
        uri = "${radios_invoke_arn}"
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
    options = {
      parameters = [
        {
          name = "radioId"
          in = "path"
          required = true
          schema = {
            type = "string"
          }
        }
      ]
      responses = {
        200 = {
          description = "200 response"
          headers = {
            Access-Control-Allow-Origin = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Methods = {
              schema = {
                type = "string"
              }
            }
            Access-Control-Allow-Headers = {
              schema = {
                type = "string"
              }
            }
          }
          content = {}
        }
      }
      x-amazon-apigateway-integration = {
        type = "mock"
        responses = {
          default = {
            statusCode = "200"
            responseParameters = {
              method.response.header.Access-Control-Allow-Methods = "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers = "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Origin = "'*'"
            }
          }
        }
        requestTemplates = {
          application/json = "{\"statusCode\": 200}"
        }
        passthroughBehavior = "when_no_match"
        timeoutInMillis = 29000
      }
    }
  }
}
components = {
  schemas = {
    Empty = {
      title = "Empty Schema"
      type = "object"
    }
  }
}
x-amazon-apigateway-binary-media-types = [
  "application/pdf"
  "application/octet-stream"
  "application/zip"
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
  "application/msword"
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
  "image/*"
]
